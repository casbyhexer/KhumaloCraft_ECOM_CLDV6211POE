@model IEnumerable<KhumalocraftEmporium_ST10069127_CLDV6211POE.Models.Product>

@{
    ViewData["Title"] = "My Work - KhumaloCraft";
}

<div class="mywork-container">
    <div class="mywork-banner">
        <img src="~/icons&images/Pen tool.png" alt="Pen Icon" class="mywork-banner-img">
    </div>
    <h1 class="mywork-title">My Work</h1>

    <div class="product-gallery">
        @if (Model != null && Model.Any())
        {
            @foreach (var product in Model)
            {
                <div class="product">
                    <img src="@product.ImageURL" alt="@product.ProductName" class="product-img">
                    <h3>@product.ProductName</h3>
                    <p>R@product.Price.ToString("N2")</p>
                    <p><strong>Category:</strong> @product.Category</p>
                    <p><strong>Availability:</strong> @(product.Availability ? "In Stock" : "Out of Stock")</p>
                    <button class="btn btn-cart" data-product="@product.ProductName">Add to Cart</button>
                    <button class="btn btn-save" data-product="@product.ProductName">Add to Saved Crafts</button>
                </div>
            }
        }
        else
        {
            <p>No products available.</p>
        }
    </div>

    <h2>Your Cart</h2>
    <ul id="cartList" class="cart-list"></ul>

    <!-- Purchase Button -->
    <button id="purchaseBtn" class="btn btn-purchase" disabled>
        <i class="fas fa-shopping-cart"></i> Purchase
    </button>

    <h2>Saved Crafts</h2>
    <ul id="savedList" class="saved-list"></ul>

    <!-- Order Notifications -->
    <h2>Order Notifications</h2>
    <ul id="orderNotifications" class="notification-list"></ul>
</div>

<!-- JavaScript for handling Cart and Saved Crafts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let cart = [];
        let savedCrafts = [];

        function updateCart() {
            document.getElementById("cartList").innerHTML = cart.map(item => `<li>${item}</li>`).join('');
            document.getElementById("purchaseBtn").disabled = cart.length === 0; // Enable button only if cart has items
        }

        function updateSavedCrafts() {
            document.getElementById("savedList").innerHTML = savedCrafts.map(item => `<li>${item}</li>`).join('');
        }

        document.querySelectorAll(".btn-cart").forEach(button => {
            button.addEventListener("click", function () {
                let product = this.getAttribute("data-product");
                cart.push(product);
                updateCart();
            });
        });

        document.querySelectorAll(".btn-save").forEach(button => {
            button.addEventListener("click", function () {
                let product = this.getAttribute("data-product");
                savedCrafts.push(product);
                updateSavedCrafts();
            });
        });

        document.getElementById("purchaseBtn").addEventListener("click", function () {
            if (cart.length > 0) {
                alert("Thank you for your purchase! You have bought: \n" + cart.join(", "));
                cart = []; // Clear cart after purchase
                updateCart();
            }
        });

        // ✅ Initialize SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/orderHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // ✅ Start SignalR Connection
        async function startSignalR() {
            try {
                await connection.start();
                console.log("Connected to SignalR");
            } catch (err) {
                console.error("SignalR Connection Error:", err);
                setTimeout(startSignalR, 5000); // Retry connection
            }
        }
        startSignalR();

        // ✅ Listen for Order Status Updates
        connection.on("ReceiveOrderUpdate", function (message) {
            console.log("Order Update Received:", message);
            const orderList = document.getElementById("orderNotifications");
            const listItem = document.createElement("li");
            listItem.textContent = message;
            orderList.appendChild(listItem);
        });
    });
</script>

<!-- FontAwesome for Shopping Cart Icon -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
